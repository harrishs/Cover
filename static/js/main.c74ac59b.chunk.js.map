{"version":3,"sources":["Components/ChatBot/ChatBot.js","App.js","serviceWorker.js","index.js"],"names":["CustomChatbot","props","options","value","label","trigger","i","length","splice","steps","id","message","user","end","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","botAvatar","botDelay","headerTitle","width","height","App","className","style","display","justifyContent","marginTop","ChatBot","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAuMeA,MAnMf,SAAuBC,GACrB,IAYIC,EAAU,CACZ,CACEC,MAAO,MACPC,MAAO,SACPC,QAAS,WACP,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IACT,QAArBJ,EAAQI,GAAGH,OACbD,EAAQM,OAAOF,EAAG,GAGtB,MAAO,QAGX,CACEH,MAAO,WACPC,MAAO,8BACPC,QAAS,WACP,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IACT,aAArBJ,EAAQI,GAAGH,OACbD,EAAQM,OAAOF,EAAG,GAGtB,MAAO,aAGX,CACEH,MAAO,OACPC,MAAO,gCACPC,QAAS,WACP,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IACT,SAArBJ,EAAQI,GAAGH,OACbD,EAAQM,OAAOF,EAAG,GAGtB,MAAO,UAKPG,EAAQ,CACZ,CACEC,GAAI,QACJC,QAAS,qCACTN,QAAS,UAEX,CACEK,GAAI,SACJC,QAAS,uBACTN,QAAS,SAEX,CACEK,GAAI,QACJE,MAAM,EACNP,QAAS,UAEX,CACEK,GAAI,SACJC,QACE,oGACFN,QAAS,UAEX,CACEK,GAAI,SACJC,QAAS,WACP,OAAuB,IAAnBT,EAAQK,OACH,yCACqB,IAAnBL,EAAQK,OACV,WAEA,YAGXF,QAAS,WAEX,CACEK,GAAI,UACJR,QAASA,GAEX,CACEQ,GAAI,MACJC,QACE,2LACFN,QAAS,WAEX,CACEK,GAAI,UACJC,QACE,sJACFN,QAAS,WAEX,CACEK,GAAI,UACJC,QACE,+HACFN,QAAS,YAEX,CACEK,GAAI,WACJC,QACE,2EACFN,QAAS,WACP,OAAIH,EAAQK,OAAS,EACZ,WAEA,WAIb,CACEG,GAAI,WACJC,QACE,yKACFN,QAAS,YAEX,CACEK,GAAI,WACJC,QACE,sHACFN,QAAS,YAEX,CACEK,GAAI,WACJC,QACE,4GACFN,QAAS,aAEX,CACEK,GAAI,YACJC,QACE,mFACFN,QAAS,WACP,OAAIH,EAAQK,OAAS,EACZ,WAEA,WAIb,CACEG,GAAI,OACJC,QACE,iHACFN,QAAS,YAEX,CACEK,GAAI,WACJC,QACE,wTACFN,QAAS,aAEX,CACEK,GAAI,YACJC,QACE,oJACFN,QAAS,WACP,OAAIH,EAAQK,OAAS,EACZ,WAEA,WAIb,CACEG,GAAI,WACJC,QACE,iJACFE,KAAK,IAGT,OACE,kBAAC,gBAAD,CAAeC,MAtLH,CACZC,WAAY,QACZC,WAAY,+BACZC,cAAe,UACfC,gBAAiB,OACjBC,eAAgB,OAChBC,eAAgB,UAChBC,aAAc,OACdC,gBAAiB,OACjBC,cAAe,YA8Kb,kBAAC,IAAD,CACEd,MAAOA,EACPe,UAAU,qKACVC,SAAU,KACVC,YAAY,8CACZC,MAAM,QACNC,OAAO,WC/KAC,MAff,WACE,OACE,yBACEC,UAAU,MACVC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,UAAW,SAGb,kBAACC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c74ac59b.chunk.js","sourcesContent":["import React from \"react\";\nimport ChatBot from \"react-simple-chatbot\";\nimport { ThemeProvider } from \"styled-components\";\n\nfunction CustomChatbot(props) {\n  const theme = {\n    background: \"white\",\n    fontFamily: \"Arial, Helvetica, sans-serif\",\n    headerBgColor: \"#00B2B2\",\n    headerFontColor: \"#fff\",\n    headerFontSize: \"25px\",\n    botBubbleColor: \"#00B2B2\",\n    botFontColor: \"#fff\",\n    userBubbleColor: \"#fff\",\n    userFontColor: \"#4c4c4c\"\n  };\n\n  let options = [\n    {\n      value: \"why\",\n      label: \"My Why\",\n      trigger: () => {\n        for (let i = 0; i < options.length; i++) {\n          if (options[i].value === \"why\") {\n            options.splice(i, 1);\n          }\n        }\n        return \"why\";\n      }\n    },\n    {\n      value: \"opencare\",\n      label: \"Why I Want to Join Opencare\",\n      trigger: () => {\n        for (let i = 0; i < options.length; i++) {\n          if (options[i].value === \"opencare\") {\n            options.splice(i, 1);\n          }\n        }\n        return \"opencare\";\n      }\n    },\n    {\n      value: \"what\",\n      label: \"What Makes Me the Perfect Fit\",\n      trigger: () => {\n        for (let i = 0; i < options.length; i++) {\n          if (options[i].value === \"what\") {\n            options.splice(i, 1);\n          }\n        }\n        return \"what\";\n      }\n    }\n  ];\n\n  const steps = [\n    {\n      id: \"Greet\",\n      message: \"Hi, it’s Harrish 👋\",\n      trigger: \"second\"\n    },\n    {\n      id: \"second\",\n      message: \"May I ask your name?\",\n      trigger: \"third\"\n    },\n    {\n      id: \"third\",\n      user: true,\n      trigger: \"fourth\"\n    },\n    {\n      id: \"fourth\",\n      message:\n        \"Oh, {previousValue} from Opencare! I’m glad you made it to my conversational cover letter :)\",\n      trigger: \"allOpt\"\n    },\n    {\n      id: \"allOpt\",\n      message: () => {\n        if (options.length === 3) {\n          return \"What would you like to learn about me?\";\n        } else if (options.length === 2) {\n          return \"Next Up:\";\n        } else {\n          return \"Finally:\";\n        }\n      },\n      trigger: \"giveOpt\"\n    },\n    {\n      id: \"giveOpt\",\n      options: options\n    },\n    {\n      id: \"why\",\n      message:\n        \"One of my favorite books is “Start With Why”, so I’ll start there. I pursued an education in Life Sciences, completed it 🎓, and was suddenly lost in ambition.\",\n      trigger: \"whyCont\"\n    },\n    {\n      id: \"whyCont\",\n      message:\n        \"I knew I was passionate about healthcare and changing the way we experience it, but I didn’t know where to start … until LightHouse Labs.\",\n      trigger: \"moreWhy\"\n    },\n    {\n      id: \"moreWhy\",\n      message:\n        \"I jumped right into a Full-Stack Web Development program because I loved building, and delivering beautiful web experiences.\",\n      trigger: \"finalWhy\"\n    },\n    {\n      id: \"finalWhy\",\n      message:\n        \"I found my purpose again: building a better way to experience healthcare\",\n      trigger: () => {\n        if (options.length < 1) {\n          return \"finished\";\n        } else {\n          return \"allOpt\";\n        }\n      }\n    },\n    {\n      id: \"opencare\",\n      message:\n        \"I believe in applying only for the companies I’m truly excited about, and that’s why I built this entire conversational cover letter just for you, Opencare.\",\n      trigger: \"moreOpen\"\n    },\n    {\n      id: \"moreOpen\",\n      message:\n        \"I want to change the way we interact with our healthcare providers—and that is exactly what Opencare is doing!\",\n      trigger: \"openCont\"\n    },\n    {\n      id: \"openCont\",\n      message:\n        \"This couldn’t be an even more perfect combination of what I want to do, and who I want to do it for.\",\n      trigger: \"finalOpen\"\n    },\n    {\n      id: \"finalOpen\",\n      message:\n        \"BONUS: I’ve got all my friends and family using Opencare too and loving it!\",\n      trigger: () => {\n        if (options.length < 1) {\n          return \"finished\";\n        } else {\n          return \"allOpt\";\n        }\n      }\n    },\n    {\n      id: \"what\",\n      message:\n        \"I am extremely user-focused with a product-mindset, and resonate so closely with all 8 of your company values.\",\n      trigger: \"whatCont\"\n    },\n    {\n      id: \"whatCont\",\n      message:\n        \"Not only do I have the technical skills you’re looking for (React, Node.js), I have not stopped investing in my growth. I’m currently enrolled at Ryerson’s Chang School to get better at Computer Science Theory and am also strengthening my React and Node skills through the use of Udemy courses.\",\n      trigger: \"finalWhat\"\n    },\n    {\n      id: \"finalWhat\",\n      message:\n        \"I also know how to thrive in team environments that move fast and strike goals together, especially from my time at Wendys and Statistics Canada.\",\n      trigger: () => {\n        if (options.length < 1) {\n          return \"finished\";\n        } else {\n          return \"allOpt\";\n        }\n      }\n    },\n    {\n      id: \"finished\",\n      message:\n        \"Woo, thanks for getting to know me! I can build more creative experiences like this. You can reach me at (647)632-1674 or harrish.s@hotmail.ca\",\n      end: true\n    }\n  ];\n  return (\n    <ThemeProvider theme={theme}>\n      <ChatBot\n        steps={steps}\n        botAvatar=\"https://media-exp1.licdn.com/dms/image/C5603AQG8dr4YQIjo6g/profile-displayphoto-shrink_200_200/0?e=1585180800&v=beta&t=RubJTXIfSbV7s4WaTqbhrXg50AdGhQlZpTExqpQEg3c\"\n        botDelay={1500}\n        headerTitle=\"Harrish Suhumar Conversational Cover Letter\"\n        width=\"700px\"\n        height=\"70vh\"\n      />\n    </ThemeProvider>\n  );\n}\nexport default CustomChatbot;\n","import React from \"react\";\nimport \"./App.css\";\nimport ChatBot from \"./Components/ChatBot/ChatBot\";\n\nfunction App() {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginTop: \"10vh\"\n      }}\n    >\n      <ChatBot />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}